generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


enum DayName {
    Lunes
    Martes
    Miercoles
    Jueves
    Viernes
    Sabado
    Domingo
}


model Day {
    id          Int @id @default(autoincrement())
    name        DayName @unique
    shortName   String?
    mediumName  String?

    dayModules DayModule[]

    @@index([name])
}


enum ModuleDifference {
    A
    B
}


model Module {
    id          Int @id @default(autoincrement())
    code        String
    difference  ModuleDifference?
    startHour   String
    endHour     String
    isActive    Boolean @default(true)

    dayModules  DayModule[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([code])
}


model DayModule {
    id        Int     @id @default(autoincrement())
    dayId     Int
    moduleId  Int
    order       Int @default(0)

    day       Day    @relation(fields: [dayId], references: [id])
    module    Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

    sections Section[]

    @@unique([dayId, moduleId])
}


model SubjectSection {
    subjectId   String
    sectionId   String
    periodId    String

    subject     Subject @relation(fields: [subjectId], references: [id])
    section     Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
    period      Period @relation(fields: [periodId], references: [id])

    @@id([subjectId, sectionId, periodId])
}


model Subject {
    id          String @id
    name        String
    startDate   DateTime
    endDate     DateTime?

    subjectSections SubjectSection[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([name])
}


enum PeriodStatus {
    InProgress
    Closed
}


model Period {
    id          String @id
    name        String
    startDate   DateTime?
    endDate     DateTime?
    openingDate DateTime?
    closingDate DateTime?
    status      PeriodStatus @default(InProgress)

    subjectSections SubjectSection[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([name])
}


model Professor {
    id          String @id
    name        String
    email       String? @unique
    isMock      Boolean @default(false)

    sections    Section[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([name])
}


enum SizeValue {
    XS
    XE
    S
    SE
    MS
    M
    L
    XL
    XXL
}


model Size {
    id          SizeValue @id
    detail      String
    min         Int?
    max         Int?
    lessThan    Int?
    greaterThan Int?

    rooms   Room[]
}


enum RoomType {
    ROOM
    AUDITORIO
    COMMUNIC
    LAB
    LABPC
    DIS
    GARAGE
    CORE
}


enum Building {
    A
    B
    C
    D
    E
    F
    Z
}


model Room {
    id          String @id
    building    Building
    capacity    Int
    type        RoomType

    sizeId      SizeValue
    size        Size @relation(fields: [sizeId], references: [id])

    sections    Section[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}


model Section {
    id                      String @id
    code                    Int
    session                 String?
    size                    SizeValue?
    correctedRegistrants    Int?
    realRegistrants         Int?
    plannedBuilding         String?
    chairsAvailable         Int?

    roomId                  String
    room                    Room @relation(fields: [roomId], references: [id])

    dayModuleId             Int
    dayModule               DayModule @relation(fields: [dayModuleId], references: [id])

    subjectSections SubjectSection[]

    professorId             String?
    professor               Professor? @relation(fields: [professorId], references: [id])

    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
}
